"use client";

import { useState, useCallback, useEffect } from "react";
import { ReactSortable } from "react-sortablejs";
import HelpButton from "../../components/HelpButton";
import { FiPlus, FiBook as BookIcon } from "react-icons/fi"
import { useDropzone } from "react-dropzone";
import Cropper from "react-easy-crop";
import Image from "next/image";
import { TextPreview } from "../../components/TextPreview";

const PostPage = () => {
  const [postType, setPostType] = useState<"通常" | "連載">("通常");

  const [serializationList, setSerializationList] = useState<string[]>(["test1", "test2", "test3", "test4","test5"]);
  const [selectedserialization, setSelectedSerialization] = useState("");
  // ↑連載リスト取り込みがまだできないので仮のコード

  // ↓バックエンド完成後に実装（連載リスト取り込み用の関数）
  useEffect(() => {
    // async function fetchSerialization() {
    //   const response = await fetch("/api/Serialization");
    //   const data = await response.json();
    //   setSerializationList(data.Serialization);
    // }
    // fetchSerialization();
  }, []);

  const [isInsertMode, setIsInsertMode] = useState(false);

  const readingInsertList = ["プロローグ", "旅立ち", "やっぱ無理", "帰還", "エピローグ"];
  const [insertIndex, setInsertIndex] = useState(readingInsertList.length - 1);
  // ↑各話リスト取り込みがまだできないので仮のコード

  // ↓バックエンド完成後に実装（各話リスト取り込み用の関数）
  useEffect(() => {
    // async function fetchReading() {
    //   const response = await fetch("/api/Reading");
    //   const data = await response.json();
    //   setReadingList(data.ReadingReading);
    // }
    // fetchReading();
  }, []);

  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState<'icon' | 'title' | 'upload'>('icon');
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return;

    const file = acceptedFiles[0];
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      setUploadedImage(result); // プレビュー表示用
      setImages([result]);      // Cropper 用の画像リスト
    };
    reader.readAsDataURL(file);
  }, []);

  const { getRootProps, getInputProps, open } = useDropzone({
    accept: { "image/*": [] },
    onDrop,
    noClick: true,
    disabled: false,
  });

  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();  // デフォルトの動作（リンク遷移）を防ぐ
    setSelectedType("upload");
    open(); // ファイル選択ダイアログを開く
  };

  const [images, setImages] = useState<string[]>([]); // アップロードされた画像を格納
  const [thumbnailIndex, setThumbnailIndex] = useState<number>(0); // サムネイル選択用インデックス
  const [crop, setCrop] = useState({ x: 0, y: 0 }); // 切り抜き位置
  const [zoom, setZoom] = useState(1); // ズーム値
  const [croppedImage, setCroppedImage] = useState<string | null>(null); // 切り抜き後の画像データURL

  const onCropComplete = useCallback(async (_: any, croppedAreaPixels: any) => {
    if (!images[thumbnailIndex]) return;

    const cropped = await new Promise<string>((resolve) => {
      const canvas = document.createElement("canvas");
      const image = new window.Image();
      image.src = images[thumbnailIndex];

      image.onload = () => {
        canvas.width = croppedAreaPixels.width;
        canvas.height = croppedAreaPixels.height;
        const ctx = canvas.getContext("2d");
        ctx?.drawImage(
          image,
          croppedAreaPixels.x,
          croppedAreaPixels.y,
          croppedAreaPixels.width,
          croppedAreaPixels.height,
          0,
          0,
          croppedAreaPixels.width,
          croppedAreaPixels.height
        );
        resolve(canvas.toDataURL());
      };
    });

    setCroppedImage(cropped);
  }, [images, thumbnailIndex]);

  const handleCrop = async () => {
    try {
      const cropped = await getCroppedImg(); // トリミングされた画像（DataURLやBlob URLを想定）
      if (cropped) {
        console.log("サムネイルが確定しました", cropped);
        setCroppedImage(cropped);       // 使い続ける場合
        setUploadedImage(cropped);      // アップロード枠に表示
      } else {
        console.warn("トリミング画像が取得できませんでした。");
      }
    } catch (error) {
      console.error("トリミング処理中にエラーが発生しました:", error);
    }
  };

  const [maintext, setMaintext] = useState("");
  const [fileName, setFileName] = useState("");
  const [preface, setPreface] = useState("");
  const [afterword, setAfterword] = useState("");
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState("");
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editingValue, setEditingValue] = useState("");
  const [tagEditPermission, setTagEditPermission] = useState("すべてのユーザー");
  const [ageLimit, setAgeLimit] = useState("");
  const [visibility, setVisibility] = useState("すべてのユーザー");
  const [commentPermission, setCommentPermission] = useState("すべてのユーザー");
  const [schedulePost, setSchedulePost] = useState(false);
  const [scheduleDate, setScheduleDate] = useState("");

  const toggleCheckbox = (value: string, setter: (val: string[]) => void, current: string[]) => {
    setter(current.includes(value) ? current.filter((v) => v !== value) : [...current, value]);
  };

  // タグの正規化とバリデーション
  const normalizeAndValidateTag = (input: string) => {
    const trimmed = input.trim();
    if (trimmed === "" || trimmed === "#") return null;

    let normalized = trimmed.startsWith("#") ? trimmed : `#${trimmed}`;

    if (normalized.length > 51) {
      return { error: "タグは50文字以内で入力してください。" };
    }
    return { tag: normalized };
  };

  // タグを追加する関数
  const handleTagInput = () => {
    const rawInput = tagInput.trim();
    if (rawInput === "" || rawInput === "#") return;

    const rawTags = rawInput.includes("#")
      ? rawInput.split("#").map(t => t.trim()).filter(t => t)
      : [rawInput];

    const newTags: string[] = [];
    const existingTags = [...tags];	

    for (let rawTag of rawTags) {
      const { tag, error } = normalizeAndValidateTag(rawTag) || {};

      if (error) {
        alert(error);
        return; // エラーが出たら中断（入力値は消さない）
      }
      if (!tag) continue;

      if (existingTags.includes(tag)) {
        alert("同じタグは追加できません。");
        return; // 入力値は消さない
      }

      newTags.push(tag);
      existingTags.push(tag);
    }

    if (tags.length + newTags.length > 50) {
      alert("タグは最大50個までです。");
      return;
    }

    setTags([...tags, ...newTags]);
    setTagInput(""); // 成功時のみクリア
  };

  // タグ編集確定
  const handleTagEditBlur = (index: number) => {
    const { tag, error } = normalizeAndValidateTag(editingValue) || {};

    if (error) {
      alert(error);
      // 入力値は残したまま編集継続
      return;
    }
    if (!tag) {
      setTags(tags.filter((_, i) => i !== index)); // 空白だったら削除
      setEditingIndex(null);
      return;
    }

    const isDuplicate = tags.some((t, i) => t === tag && i !== index);
    if (isDuplicate) {
      alert("同じタグは追加できません。");
      // 入力値は残したまま編集継続
      return;
    }

    setTags(tags.map((t, i) => (i === index ? tag : t)));
    setEditingIndex(null); // 成功したら編集終了
  };

  const isPostDisabled = title.length === 0 || maintext.length === 0 || ageLimit === "";

  return (
    <div className="relative w-full max-w-10xl mx-auto p-8 flex flex-col items-center">

      <div className="w-full max-w-md space-y-6">
        <div>
          <div className="mb-6">
            <div className="flex items-center gap-4 mb-4">
              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="radio"
                  name="postType"
                  value="通常"
                  checked={postType === "通常"}
                  onChange={() => setPostType("通常")}
                />
                通常
              </label>

              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="radio"
                  name="postType"
                  value="連載"
                  checked={postType === "連載"}
                  onChange={() => setPostType("連載")}
                />
                連載
              </label>
            </div>

            {postType === "連載" && (
              <div className="mt-2 flex gap-2 w-full max-w-md">
                <select
                  className="border border-gray-300 p-2 rounded w-full cursor-pointer"
                  value={selectedserialization}
                  onChange={(e) => {
                    const value = e.target.value;
                    setSelectedSerialization(value);
                    setIsInsertMode(false); // モードを初期化
                    setInsertIndex(0);      // 必要であればインデックスも初期化
                  }}
                >
                  <option value="">未選択</option>
                  {serializationList.map((s, idx) => (
                    <option key={idx} value={s}>
                      {s}
                    </option>
                  ))}
                </select>
                
                <button
                  type="button"
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition whitespace-nowrap cursor-pointer"
                  onClick={() => alert("新規作成ボタンがクリックされました")}
    		>
     		  新規作成
    		</button>
              </div>
            )}

            {postType === "連載" && (
              <div className="mt-2 flex flex-col gap-2 w-full items-start">
                <button
                  type="button"
                  className={`bg-white px-1 py-0 ${
                    selectedserialization === ""
                      ? "text-gray-300 cursor-not-allowed"
                      : "text-gray-600 hover:text-black cursor-pointer"
                  }`}
                  onClick={() => {
                    if (selectedserialization !== "") {
                      setIsInsertMode((prev) => !prev);
                    }
                  }}
                  disabled={selectedserialization === ""}
                >
                  {isInsertMode ? "－ 投稿位置を変更する" : "＋ 投稿位置を変更する"}
                </button>

                {isInsertMode && (
                  <div className="flex items-center justify-between bg-gray-100 p-2 rounded text-sm w-full">
                    <button
                      type="button"
                      className="text-xl px-2 transition cursor-pointer hover:text-blue-600"
                      onClick={() =>
                        setInsertIndex((prev) =>
                          prev <= -1 ? readingInsertList.length - 1 : prev - 1
                        )
                      }
                    >
                      ◀
                    </button>

                    <span className="text-gray-700">
                      {insertIndex === -1 ? (
                        "冒頭部分に投稿"
                      ) : insertIndex === readingInsertList.length - 1 ? (
                        "最新部分に投稿"
                      ) : (
                        <>
                          「{readingInsertList[insertIndex]}」と「
                          {readingInsertList[insertIndex + 1]}」の間に投稿
                        </>
                      )}
                    </span>

                    <button
                      type="button"
                      className="text-xl px-2 transition cursor-pointer hover:text-blue-600"
                      onClick={() =>
                        setInsertIndex((prev) =>
                          prev >= readingInsertList.length - 1 ? -1 : prev + 1
                        )
                      }
                    >
                      ▶
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          <label className="font-semibold block mb-2 text-red-600">
            タイトル <span className="text-xs text-red-500 ml-1">(必須)</span>
          </label>
          <textarea
            className="w-full border border-gray-300 p-2 rounded resize-y"
            placeholder="タイトルを入力"
            value={title}
            maxLength={100}
            rows={1}
            onChange={(e) => setTitle(e.target.value)}
          />
          <p className="text-sm text-right text-gray-500">{title.length.toLocaleString()}/100</p>
        </div>
      </div>

      <div className="w-full max-w-md space-y-6 mt-2">
        <label className="font-semibold block mb-2">
          サムネイル設定
        </label>
        <div className="flex gap-4 mb-8">
          {/* ①本アイコン */}
          <div
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border ${
              selectedType === 'icon' ? 'border-blue-500' : 'border-gray-300'
            } bg-white`}
            onClick={() => setSelectedType('icon')}
          >
            <BookIcon className="text-4xl text-gray-600" />
          </div>

          {/* ②タイトル描画 */}
          <div
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border text-center px-2 ${
              selectedType === 'title' ? 'border-blue-500' : 'border-gray-300'
            } bg-white`}
            onClick={() => setSelectedType('title')}
          >
            <span
              className="text-sm text-gray-700 break-all text-center line-clamp-6"
            >
              {title || "タイトルを表示"}
            </span>
          </div>

          {/* ③アップロード画像 or ＋マーク */}
          <div
            {...getRootProps({ onClick: handleClick })}
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border ${
              selectedType === "upload" ? "border-blue-500" : "border-gray-300"
            } bg-gray-100 relative overflow-hidden`}
          >
            <input {...getInputProps()} />
            {croppedImage ? (
              <Image
                src={croppedImage}
                alt="サムネイル画像"
                fill
                className="object-cover"
              />
            ) : (
              <FiPlus className="text-3xl text-gray-500" />
            )}
          </div>
        </div>
      </div>

      <div className="w-full max-w-10xl space-y-6">
        {images[0] && (
          <>
            <div className="relative w-full h-[400px] bg-gray-100 mb-6">
              <Cropper
                image={images[thumbnailIndex]}
                crop={crop}
                zoom={zoom}
                aspect={3 / 3}
                onCropChange={setCrop}
                onZoomChange={setZoom}
                onCropComplete={onCropComplete}
              />
            </div>
          </>
        )}
      </div>

      <div className="w-full max-w-md space-y-6">
        {images[0] && (
          <>
            <div className="w-full max-w-md mb-6">
              <label className="block mb-2 font-semibold">ズーム</label>
              <input
                type="range"
                min={1}
                max={3}
                step={0.1}
                value={zoom}
                onChange={(e) => setZoom(Number(e.target.value))}
                className="w-full cursor-pointer"
              />
            </div>
          </>
        )}
      </div>

      <div className="w-full max-w-md space-y-6">
        <div>
          <label className="font-semibold block mb-2 text-red-600">
            本文 <span className="text-xs text-red-500 ml-1">(必須)</span>
            <HelpButton href="/helpcenter/upload_text/maintext" />
          </label>

          <div className="flex items-center space-x-4 mt-2">
            <label className="px-4 py-2 bg-blue-500 text-white rounded cursor-pointer inline-block hover:bg-blue-600">
              .txtファイルを選択
              <input
                type="file"
                accept=".txt"
                className="hidden"
                onChange={async (e) => {
                  const file = e.target.files?.[0];
                  if (!file) return;
                  if (file.type !== "text/plain") {
                    alert("テキストファイル（.txt）のみ対応しています。");
                    return;
                  }
                  const text = await file.text();
                  setMaintext(text); // 既存の本文置換処理
                  setFileName(file.name); // ファイル名を記録
                }}
              />
            </label>

            {fileName && (
              <span className="text-sm text-gray-700 truncate max-w-[150px]">
                {fileName}
              </span>
            )}

            {(fileName || maintext) && (
              <button
                type="button"
                className="ml-auto px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition cursor-pointer"
                onClick={() => {
                  const confirmed = window.confirm("削除しますか？");
                  if (confirmed) {
                    setMaintext("");
                    setFileName("");
                  }
                }}
              >
                クリア
              </button>
            )}
          </div>

          <textarea
            className="w-full border border-gray-300 p-2 rounded mt-2"
            placeholder="本文を入力"
            value={maintext}
            maxLength={100000}
            rows={10}
            onChange={(e) => setMaintext(e.target.value)}
          />

          <p className="text-sm text-right text-gray-500">{maintext.length.toLocaleString()}/100,000</p>
        </div>

        <div>
          <label className="font-semibold block mb-2">
            前書き
          </label>
          <textarea
            className="w-full border border-gray-300 p-2 rounded"
            placeholder="前書きを入力"
            value={preface}
            maxLength={1000}
            rows={2}
            onChange={(e) => setPreface(e.target.value)}
          />
          <p className="text-sm text-right text-gray-500">{preface.length.toLocaleString()}/1,000</p>
        </div>

        <div>
          <label className="font-semibold block mb-2">
            後書き
          </label>
          <textarea
            className="w-full border border-gray-300 p-2 rounded"
            placeholder="後書きを入力"
            value={afterword}
            maxLength={10000}
            rows={2}
            onChange={(e) => setAfterword(e.target.value)}
          />
          <p className="text-sm text-right text-gray-500">{afterword.length.toLocaleString()}/10,000</p>
        </div>

        <div>
          <label className="font-semibold block mb-2">
            プレビュー
          </label>
          <div className="border border-gray-300 rounded-md p-4 bg-white resize-y overflow-auto">
            <TextPreview
              title={title}
              preface={preface}
              maintext={maintext}
              afterword={afterword}
            />
          </div>
        </div>

        <div>
          <label className="font-semibold block mb-2">
            タグ
            <HelpButton href="/helpcenter/tags" />
          </label>

          <div className="flex flex-wrap gap-2 mb-2">
            {["小説", "オリジナル", "二次創作", "評論", "記事", "AI"].map((preset) => {
              const alreadyAdded = tags.includes(preset);

              return (
                <button
                  key={preset}
                  type="button"
                  onClick={() => {
                    if (tags.length >= 50) {
                      alert("タグは最大50個までです。");
                      return;
                    }
                    const formattedTag = `#${preset}`;
                    if (!tags.includes(formattedTag)) {
                      setTags([...tags, formattedTag]);
                    }
                  }}
                  disabled={tags.includes(`#${preset}`)}
                  className={`px-3 py-1 rounded-full text-sm transition ${
                    tags.includes(preset) || tags.includes(`#${preset}`)
                      ? "bg-gray-400 text-gray-600 cursor-not-allowed"
                      : "bg-gray-200 text-gray-700 cursor-pointer hover:bg-gray-300"
                  }`}
                >
                  {preset}
                </button>
              );
            })}
          </div>

          <div className="flex gap-2">
            <input
              type="text"
              className="flex-1 border border-gray-300 p-2 rounded"
              placeholder="タグを入力 (最大50文字/個・最大50個)"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  e.preventDefault();
                  handleTagInput();
                }
              }}
            />
            <button
              type="button"
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition cursor-pointer"
              onClick={handleTagInput}
            >
              追加
            </button>
          </div>

          <ReactSortable
            list={tags.map((tag, index) => ({ id: index, name: tag }))}
            setList={(newList) => setTags(newList.map((item) => item.name))}
            className="flex flex-wrap gap-2 mt-2"
          >
            {tags.map((tag, index) => (
              <div
                key={index}
                className="relative flex items-center bg-gray-200 rounded px-2 py-1 cursor-move group"
              >
                {editingIndex === index ? (
                  <input
                    className="px-2 py-1 bg-white border rounded w-32"
                    value={editingValue}
                    autoFocus
                    onChange={(e) => setEditingValue(e.target.value)}
                    onBlur={() => handleTagEditBlur(index)}
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        (e.target as HTMLInputElement).blur();
                      }
                    }}
                  />
                ) : (
                  <span
                    className="pr-4"
                    onClick={() => {
                      setEditingIndex(index);
                      setEditingValue(tag);
                    }}
                  >
                    {tag}
                  </span>
                )}

                <button
                  type="button"
                  className="absolute top-[-6px] right-[-6px] bg-white rounded-full w-5 h-5 flex items-center justify-center text-gray-500 text-xs shadow-sm cursor-pointer hover:bg-red-500 hover:text-white transition"
                  onClick={() => {
                    setTags(tags.filter((_, i) => i !== index));
                    if (editingIndex !== null && editingIndex > index) {
                      setEditingIndex(editingIndex - 1);
                    } else if (editingIndex === index) {
                      setEditingIndex(null);
                    }
                  }}
                >
                  ×
                </button>
              </div>
            ))}
          </ReactSortable>

          <p className="text-sm text-gray-500 mt-1">{tags.length} / 50個</p>

          {tags.length > 0 && (
            <button
              type="button"
              className="mt-2 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition cursor-pointer"
              onClick={() => {
                const confirmed = window.confirm("すべてのタグを削除しますか？");
                if (confirmed) {
                  setTags([]);
                }
              }}
            >
              全削除
            </button>
          )}
        </div>

        <div>
          <label className="font-semibold block mb-2">タグの編集権限</label>
          <select
            className="w-full border border-gray-300 p-2 rounded cursor-pointer"
            value={tagEditPermission}
            onChange={(e) => setTagEditPermission(e.target.value)}
          >
            {["すべてのユーザー", "投稿者＋フォロワー", "投稿者のみ"].map((option) => (
              <option key={option}>{option}</option>
            ))}
          </select>
        </div>

        <div className="mb-4">
          <label className="font-semibold block mb-2 text-red-600">
            年齢制限 <span className="text-xs text-red-500 ml-1">(必須)</span>
            <HelpButton href="/helpcenter/age-limit" />
          </label>
          {["全年齢", "R-18"].map((option) => (
            <label
              key={option}
              className={`flex items-center gap-2 my-1 cursor-pointer transition`}
            >
              <input
                type="radio"
                name="ageLimit"
                value={option}
                checked={ageLimit === option}
                onChange={() => setAgeLimit(option)}
                className="cursor-pointer"
              />
              {option}
            </label>
          ))}
        </div>

        <div>
          <label className="font-semibold block mb-2">公開範囲</label>
          <select
            className="w-full border border-gray-300 p-2 rounded cursor-pointer"
            value={visibility}
            onChange={(e) => setVisibility(e.target.value)}
          >
            {["すべてのユーザー", "投稿者＋フォロワー", "非公開"].map((option) => (
              <option key={option}>{option}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="font-semibold block mb-2">コメント許可範囲</label>
          <select
            className="w-full border border-gray-300 p-2 rounded cursor-pointer"
            value={commentPermission}
            onChange={(e) => setCommentPermission(e.target.value)}
          >
            {["すべてのユーザー", "投稿者＋フォロワー", "不可"].map((option) => (
              <option key={option}>{option}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="flex items-center gap-2 font-semibold cursor-pointer">
            <input
              type="checkbox"
              checked={schedulePost}
              onChange={() => setSchedulePost(!schedulePost)}
            />
            予約投稿
          </label>
          {schedulePost && (
            <input
              type="datetime-local"
              className="w-full border border-gray-300 p-2 rounded mt-2 cursor-pointer"
              value={scheduleDate}
              onChange={(e) => setScheduleDate(e.target.value)}
            />
          )}
        </div>

        <button
          className={`bg-gradient-to-r from-blue-500 to-purple-500 text-white px-6 py-2 rounded transition w-full ${
            isPostDisabled ? "opacity-50 cursor-not-allowed" : "hover:opacity-70 cursor-pointer"
          }`}
          disabled={isPostDisabled}
        >
          投稿する
        </button>
      </div>

    </div>
  );
};

export default PostPage;
