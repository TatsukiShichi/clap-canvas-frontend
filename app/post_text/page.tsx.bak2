"use client";

import { useState, useCallback } from "react";
import { FiPlus, FiBookOpen as BookIcon } from "react-icons/fi"
import { useDropzone } from "react-dropzone";
import Cropper from "react-easy-crop";
import Image from "next/image";

import HelpButton from "../../components/HelpButton";
import PostTypeSelector from "../../components/PostTypeSelector";
import { TextPreview } from "../../components/TextPreview";
import TagInput from "../../components/TagInput";
import PostSettingsForm from "../../components/PostSettingsForm";

const PostPage = () => {
  const [title, setTitle] = useState("");

  const [selectedType, setSelectedType] = useState<'icon' | 'title' | 'upload'>('icon');
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return;

    const file = acceptedFiles[0];
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      setUploadedImage(result); // プレビュー表示用
      setImages([result]);      // Cropper 用の画像リスト
    };
    reader.readAsDataURL(file);
  }, []);

  const { getRootProps, getInputProps, open } = useDropzone({
    accept: { "image/*": [] },
    onDrop,
    noClick: true,
    disabled: false,
  });

  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();  // デフォルトの動作（リンク遷移）を防ぐ
    setSelectedType("upload");
    open(); // ファイル選択ダイアログを開く
  };

  const [images, setImages] = useState<string[]>([]); // アップロードされた画像を格納
  const [thumbnailIndex, setThumbnailIndex] = useState<number>(0); // サムネイル選択用インデックス
  const [crop, setCrop] = useState({ x: 0, y: 0 }); // 切り抜き位置
  const [zoom, setZoom] = useState(1); // ズーム値
  const [croppedImage, setCroppedImage] = useState<string | null>(null); // 切り抜き後の画像データURL

  const [tempCroppedData, setTempCroppedData] = useState<string | null>(null);

  const onCropComplete = useCallback(async (_: any, croppedAreaPixels: any) => {
    if (!images[thumbnailIndex]) return;

    const cropped = await new Promise<string>((resolve) => {
      const canvas = document.createElement("canvas");
      const image = new window.Image();
      image.src = images[thumbnailIndex];

      image.onload = () => {
        canvas.width = croppedAreaPixels.width;
        canvas.height = croppedAreaPixels.height;
        const ctx = canvas.getContext("2d");
        ctx?.drawImage(
          image,
          croppedAreaPixels.x,
          croppedAreaPixels.y,
          croppedAreaPixels.width,
          croppedAreaPixels.height,
          0,
          0,
          croppedAreaPixels.width,
          croppedAreaPixels.height
        );
        resolve(canvas.toDataURL());
      };
    });

    setTempCroppedData(cropped); // 一時保存
  }, [images, thumbnailIndex]);

  // バックエンド未完成のため取り込むリスト代わりのダミーデータ
  const serializationList = ["testA", "testB", "testC"];
  const readingInsertList = ["第1話", "第2話", "第3話", "第4話", "第5話" ];

  // 初期状態
  const [postType, setPostType] = useState<"通常" | "連載">("通常");
  const [selectedSerialization, setSelectedSerialization] = useState("");
  const [isInsertMode, setIsInsertMode] = useState(false);
  const [insertIndex, setInsertIndex] = useState(0);
  const [maintext, setMaintext] = useState("");
  const [fileName, setFileName] = useState("");
  const [preface, setPreface] = useState("");
  const [afterword, setAfterword] = useState("");
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState("");
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editingValue, setEditingValue] = useState("");
  const [tagEditPermission, setTagEditPermission] = useState("すべてのユーザー");
  const [ageLimit, setAgeLimit] = useState("");
  const [visibility, setVisibility] = useState("すべてのユーザー");
  const [commentPermission, setCommentPermission] = useState("すべてのユーザー");
  const [schedulePost, setSchedulePost] = useState(false);
  const [scheduleDate, setScheduleDate] = useState("");

  // 投稿ボタンの無効化条件
  const isPostDisabled = title.length === 0 || maintext.length === 0 || ageLimit === "";

  return (
    <div className="relative w-full max-w-10xl mx-auto p-8 flex flex-col items-center">
      <div className="w-full max-w-md">
        {/* 投稿タイプの選択ボタン */}
        <PostTypeSelector
          postType={postType}
          setPostType={setPostType}
          selectedSerialization={selectedSerialization}
          setSelectedSerialization={setSelectedSerialization}
          isInsertMode={isInsertMode}
          setIsInsertMode={setIsInsertMode}
          insertIndex={insertIndex}
          setInsertIndex={setInsertIndex}
          serializationList={serializationList}
          readingInsertList={readingInsertList}
        />

        {/* タイトル */}
        <label className="font-semibold block mb-2 text-red-600">
          タイトル <span className="text-xs text-red-500 ml-1">(必須)</span>
        </label>
        <textarea
          className="w-full border border-gray-300 p-2 rounded resize-y"
          placeholder="タイトルを入力"
          value={title}
          maxLength={100}
          rows={1}
          onChange={(e) => setTitle(e.target.value)}
        />
        <p className="text-sm text-right text-gray-500">{title.length.toLocaleString()}/100</p>

        {/* サムネイル設定 */}
        <label className="font-semibold block mb-2">
          サムネイル設定
        </label>

        <div className="flex gap-4 mb-8 justify-center">
          {/* 本アイコン（左） */}
          <div
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border ${
              selectedType === 'icon' ? 'border-blue-500' : 'border-gray-300'
            } bg-white`}
            onClick={() => setSelectedType('icon')}
          >
            <BookIcon className="text-4xl text-gray-600" />
          </div>

          {/* タイトル（中） */}
          <div
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border text-center px-2 ${
              selectedType === 'title' ? 'border-blue-500' : 'border-gray-300'
            } bg-white`}
            onClick={() => setSelectedType('title')}
          >
            <span
              className="text-sm text-gray-700 break-all text-center line-clamp-6"
            >
              {title || "タイトルを表示"}
            </span>
          </div>

          {/* アップロード画像（右） */}
          <div
            {...getRootProps({ onClick: handleClick })}
            className={`w-32 h-32 flex items-center justify-center rounded cursor-pointer border ${
              selectedType === "upload" ? "border-blue-500" : "border-gray-300"
            } bg-gray-200 relative overflow-hidden`}
          >
            <input {...getInputProps()} />
            <FiPlus className="text-3xl text-gray-500" />
          </div>
        </div>
        
        {/* サムネイル画像切り抜き（切り抜き部分） */}
        {images[0] && (
          <>
            <div className="relative w-full h-[400px] bg-gray-100 mb-6">
              <Cropper
                image={images[thumbnailIndex]}
                crop={crop}
                zoom={zoom}
                aspect={3 / 3}
                onCropChange={setCrop}
                onZoomChange={setZoom}
                onCropComplete={onCropComplete}
                minZoom={1}
                maxZoom={5}
              />
            </div>
          </>
        )}

        {/* サムネイル画像切り抜き（ズームバー部分） */}
        {images[0] && (
          <>
            <div className="w-full max-w-md mb-6">
              <label className="block mb-2 font-semibold">ズーム</label>
              <div className="flex items-center gap-2">
                <input
                  type="range"
                  min={1}
                  max={5}
                  step={0.01}
                  value={zoom}
                  onChange={(e) => setZoom(Number(e.target.value))}
                  className="flex-1 cursor-pointer"
                />
                <button
                  onClick={() => setZoom((prev) => Math.max(1, prev - 0.1))}
                  className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
                >
                  −
                </button>
                <button
                  onClick={() => setZoom((prev) => Math.min(5, prev + 0.1))}
                  className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
                >
                  ＋
                </button>
              </div>
            </div>
          </>
        )}

        {/* サムネイル確定ボタン */}
        {images[0] && (
          <div className="flex justify-center">
            <button
              className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 transition mb-8 cursor-pointer"
              onClick={() => {
                if (tempCroppedData) setCroppedImage(tempCroppedData);
              }}
            >
              サムネイルを確定
            </button>
          </div>
        )}

        {/* サムネイルプレビュー */}
        {croppedImage && (
          <div className="mb-8 text-center">
            <h2 className="font-semibold mb-2">サムネイルプレビュー</h2>
            <Image src={croppedImage} alt="Cropped" width={300} height={200} className="rounded mx-auto" />
          </div>
        )}

        {/* 本文 */}
        <label className="font-semibold block mb-2 text-red-600">
          本文 <span className="text-xs text-red-500 ml-1">(必須)</span>
          <HelpButton href="/helpcenter/upload_text/maintext" />
        </label>

        <label className="px-4 py-2 bg-blue-500 text-white rounded cursor-pointer inline-block hover:bg-blue-600">
          .txtファイルを選択
          <input
            type="file"
            accept=".txt"
            className="hidden"
            onChange={async (e) => {
              const file = e.target.files?.[0];
              if (!file) return;
              if (file.type !== "text/plain") {
                alert("テキストファイル（.txt）のみ対応しています。");
                return;
              }
              const text = await file.text();
              setMaintext(text);
              setFileName(file.name);
            }}
          />
        </label>

        {fileName && (
          <span className="text-sm text-gray-700 truncate max-w-[150px]">
            {fileName}
          </span>
        )}

        {(fileName || maintext) && (
          <button
            type="button"
            className="ml-auto px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition cursor-pointer"
            onClick={() => {
              const confirmed = window.confirm("削除しますか？");
              if (confirmed) {
                setMaintext("");
                setFileName("");
              }
            }}
          >
            クリア
          </button>
        )}

        <textarea
          className="w-full border border-gray-300 p-2 rounded mt-2"
          placeholder="本文を入力"
          value={maintext}
          maxLength={100000}
          rows={10}
          onChange={(e) => setMaintext(e.target.value)}
        />
        <p className="text-sm text-right text-gray-500">{maintext.length.toLocaleString()}/100,000</p>

        {/* 前書き */}
        <label className="font-semibold block mb-2">
          前書き
        </label>
        <textarea
          className="w-full border border-gray-300 p-2 rounded"
          placeholder="前書きを入力"
          value={preface}
          maxLength={1000}
          rows={2}
          onChange={(e) => setPreface(e.target.value)}
        />
        <p className="text-sm text-right text-gray-500">{preface.length.toLocaleString()}/1,000</p>

        {/* 後書き */}
        <label className="font-semibold block mb-2">
          後書き
        </label>
        <textarea
          className="w-full border border-gray-300 p-2 rounded"
          placeholder="後書きを入力"
       　 value={afterword}
          maxLength={10000}
          rows={2}
          onChange={(e) => setAfterword(e.target.value)}
        />
        <p className="text-sm text-right text-gray-500">{afterword.length.toLocaleString()}/10,000</p>

        {/* プレビュー */}
        <label className="font-semibold block mb-2">
          プレビュー
        </label>
        <div className="border border-gray-300 rounded-md p-4 bg-white resize-y overflow-auto">
          <TextPreview
            title={title}
            preface={preface}
            maintext={maintext}
            afterword={afterword}
          />
        </div>
      </div>

      <div className="relative w-full max-w-10xl flex flex-col items-center mt-4">
        <div className="w-full max-w-md space-y-6">
          {/* タグ登録 */}
          <TagInput presets={["小説", "オリジナル", "二次創作", "評論", "記事", "AI"]} />

          {/* タグ編集権限～予約投稿 */}
          <PostSettingsForm
            tagEditPermission={tagEditPermission}
            setTagEditPermission={setTagEditPermission}
            ageLimit={ageLimit}
            setAgeLimit={setAgeLimit}
            visibility={visibility}
            setVisibility={setVisibility}
            commentPermission={commentPermission}
            setCommentPermission={setCommentPermission}
            schedulePost={schedulePost}
            setSchedulePost={setSchedulePost}
            scheduleDate={scheduleDate}
            setScheduleDate={setScheduleDate}
          />

          {/* 投稿ボタン */}
          <button
            className={`bg-gradient-to-r from-blue-500 to-purple-500 text-white px-6 py-2 rounded transition w-full ${
              isPostDisabled ? "opacity-50 cursor-not-allowed" : "hover:opacity-70 cursor-pointer"
            }`}
            disabled={isPostDisabled}
          >
            投稿する
          </button>
        </div>
      </div>
    </div>
  );
};

export default PostPage;
